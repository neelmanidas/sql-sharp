PARSER_BEGIN(SQLParser)
class SQLParser {}
PARSER_END(SQLParser)

SKIP : {
	<"--" (["a"-"z"])* ("\n" | "\r" | "\r\n")>
    |	" "
    |	"\t"
    |	"\n"
}

TOKEN : {
	< SELECT: "SELECT">
    |	< FROM: "FROM">
    |	< WHERE: "WHERE">
    |	< GROUPBY: "GROUP BY">
    |	< ORDERBY: "ORDER BY">
    |	< comma: ",">
    |	< identifier: ["a"-"z"](["a"-"z"] | ["0"-"9"])* >
    |	< asterisk: "*">
    |	< leftparen: "(">
    |	< rightparen: ")">
    |   < setfunctiontype: "AVG" | "MAX" | "MIN" | "SUM" | "COUNT">
    |	< #digit: ["0"-"9"] >
    |	< #integer: (<digit>)+ >
    |	< #real: ( <digit> )+ "." ( <digit> )+ >
    |   < number: ( "+" | "-" )? ( <integer> | <real> ) >
    |	< OR: "OR">
    |	< AND: "AND">
    |	<semicolon: ";">
    |	< IS: "IS">
    |	< NOT: "NOT">
    |	< #equalsoperator: "=" >
    |	< #lessthanoperator: "<" >
    |	< #greaterthanoperator: ">" >
    |	<compop: <equalsoperator> | <lessthanoperator> <greaterthanoperator> | <lessthanoperator> | <greaterthanoperator> | <lessthanoperator> <equalsoperator> | <greaterthanoperator> <equalsoperator> >
    |	< ASC: "ASC" >
    |	< DESC: "DESC" >
}

void Prog() :
{}
{ queryList() <EOF> }

void queryList() :
{}
{ querySpecification() ( querySpecification() )* }

void querySpecification() :
{}
{ select() from() [ where() ] [ groupby() ] [ orderby() ]";" }

void select() :
{}
{ <SELECT> ( "*" | commonValueExpression() ( "," commonValueExpression() )* ) }

void from() :
{}
{ <FROM> identifier() }

void where() :
{}
{ <WHERE> booleanValueExpression() }

void groupby() :
{}
{ <GROUPBY> identifier() }

void orderby() :
{}
{ <ORDERBY> identifier() [ <ASC> | <DESC> ] }

void commonValueExpression() :
{}
{ "(" commonValueExpression() ")" | nonparenthesizedValueExpressionPrimary() }

void nonparenthesizedValueExpressionPrimary() :
{}
{ identifier() | setFunctionType() | <number> }

void identifier() :
{}
{ <identifier> }

void setFunctionType():
{}
{ <setfunctiontype> "(" <identifier> ")" }

void booleanValueExpression() :
{}
{ booleanTerm() booleanValueExpressionPrime() }

void booleanValueExpressionPrime() :
{}
{ ( <OR> booleanTerm() booleanValueExpressionPrime() )? }

void booleanTerm() :
{}
{ booleanFactor() booleanTermPrime() }

void booleanTermPrime() :
{}
{ ( <AND> booleanFactor() booleanTermPrime())? }

void booleanFactor() : 
{}
{ [ <NOT> ] boleanPredicand() [<compop> boleanPredicand()] }

void boleanPredicand() :
{}
{ "(" booleanValueExpression() ")" | nonparenthesizedValueExpressionPrimary() }

