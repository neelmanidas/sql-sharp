//
// Generated by JTB 1.3.2
//



PARSER_BEGIN(SQLParser)
import syntaxtree.*;
import java.util.Vector;


class SQLParser 
{
}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}


PARSER_END(SQLParser)

SKIP :
{
   <"--" (["a"-"z"])* ("\n" | "\r" | "\r\n")>
   | " "
   | "\t"
   | "\n"
}

TOKEN :
{
   <SELECT: "SELECT">
   | <FROM: "FROM">
   | <WHERE: "WHERE">
   | <GROUPBY: "GROUP BY">
   | <ORDERBY: "ORDER BY">
   | <comma: ",">
   | <identifier: ["a"-"z"] (["a"-"z"] | ["0"-"9"])*>
   | <asterisk: "*">
   | <AS: "AS">
   | <leftparen: "(">
   | <rightparen: ")">
   | <setfunctiontype: "AVG" | "MAX" | "MIN" | "SUM" | "COUNT">
   | <#digit: ["0"-"9"]>
   | <#integer: (<digit>)+>
   | <#real: (<digit>)+ "." (<digit>)+>
   | <number: ("+" | "-")? (<integer> | <real>)>
   | <OR: "OR">
   | <AND: "AND">
   | <semicolon: ";">
   | <IS: "IS">
   | <NOT: "NOT">
   | <#equalsoperator: "=">
   | <#lessthanoperator: "<">
   | <#greaterthanoperator: ">">
   | <compop: <equalsoperator> | <lessthanoperator> <greaterthanoperator> | <lessthanoperator> | <greaterthanoperator> | <lessthanoperator> <equalsoperator> | <greaterthanoperator> <equalsoperator>>
   | <ASC: "ASC">
   | <DESC: "DESC">
}

Prog Prog() :
{
   queryList n0;
   NodeToken n1;
   Token n2;

   
}
{
   n0=queryList()
   n2=<EOF> { 
      n2.beginColumn++; n2.endColumn++;
      n1 = JTBToolkit.makeNodeToken(n2);
   }
   
   { return new Prog(n0,n1); }
}

queryList queryList() :
{
   querySpecification n0;
   NodeListOptional n1 = new NodeListOptional();
   querySpecification n2;

   
}
{
   n0=querySpecification()
   (
      n2=querySpecification()
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new queryList(n0,n1); }
}

querySpecification querySpecification() :
{
   select n0;
   from n1;
   NodeOptional n2 = new NodeOptional();
   where n3;
   NodeOptional n4 = new NodeOptional();
   groupby n5;
   NodeOptional n6 = new NodeOptional();
   orderby n7;
   NodeToken n8;
   Token n9;

   
}
{
   n0=select()
   n1=from()
   (
      n3=where()
      { n2.addNode(n3); }
   )?
   (
      n5=groupby()
      { n4.addNode(n5); }
   )?
   (
      n7=orderby()
      { n6.addNode(n7); }
   )?
   n9=";" { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new querySpecification(n0,n1,n2,n4,n6,n8); }
}

select select() :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeToken n3;
   Token n4;
   NodeSequence n5;
   derivedColumn n6;
   NodeListOptional n7 = new NodeListOptional();
   NodeSequence n8;
   NodeToken n9;
   Token n10;
   derivedColumn n11;

   
}
{
   n1=<SELECT> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         n4="*" { n3 = JTBToolkit.makeNodeToken(n4); }
         { n2 = new NodeChoice(n3, 0); }
      |
         { n5 = new NodeSequence(2); }
         n6=derivedColumn()
         { n5.addNode(n6); }
         (
            { n8 = new NodeSequence(2); }
            n10="," { n9 = JTBToolkit.makeNodeToken(n10); }
            { n8.addNode(n9); }
            n11=derivedColumn()
            { n8.addNode(n11); }
            { n7.addNode(n8); }
         )*
         { n7.nodes.trimToSize(); }
         { n5.addNode(n7); }
         { n2 = new NodeChoice(n5, 1); }
      )
      
   )
   
   { return new select(n0,n2); }
}

from from() :
{
   NodeToken n0;
   Token n1;
   identifier n2;

   
}
{
   n1=<FROM> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=identifier()
   
   { return new from(n0,n2); }
}

where where() :
{
   NodeToken n0;
   Token n1;
   booleanValueExpression n2;

   
}
{
   n1=<WHERE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=booleanValueExpression()
   
   { return new where(n0,n2); }
}

groupby groupby() :
{
   NodeToken n0;
   Token n1;
   identifier n2;

   
}
{
   n1=<GROUPBY> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=identifier()
   
   { return new groupby(n0,n2); }
}

orderby orderby() :
{
   NodeToken n0;
   Token n1;
   identifier n2;
   NodeOptional n3 = new NodeOptional();
   NodeChoice n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   
}
{
   n1=<ORDERBY> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=identifier()
   (
      (
         n6=<ASC> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n4 = new NodeChoice(n5, 0); }
      |
         n8=<DESC> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n4 = new NodeChoice(n7, 1); }
      )
      { n3.addNode(n4); }
   )?
   
   { return new orderby(n0,n2,n3); }
}

derivedColumn derivedColumn() :
{
   commonValueExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   identifier n5;

   
}
{
   n0=commonValueExpression()
   (
      { n2 = new NodeSequence(2); }
      n4=<AS> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=identifier()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )?
   
   { return new derivedColumn(n0,n1); }
}

commonValueExpression commonValueExpression() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   commonValueExpression n4;
   NodeToken n5;
   Token n6;
   nonparenthesizedValueExpressionPrimary n7;

   
}
{
   (
      { n1 = new NodeSequence(3); }
      n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      n4=commonValueExpression()
      { n1.addNode(n4); }
      n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
      { n1.addNode(n5); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n7=nonparenthesizedValueExpressionPrimary()
      { n0 = new NodeChoice(n7, 1); }
   )
   
   { return new commonValueExpression(n0); }
}

nonparenthesizedValueExpressionPrimary nonparenthesizedValueExpressionPrimary() :
{
   NodeChoice n0;
   identifier n1;
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   commonValueExpression n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;

   
}
{
   (
      n1=identifier()
      { n0 = new NodeChoice(n1, 0); }
   |
      { n2 = new NodeSequence(4); }
      n4=<setfunctiontype> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n6="(" { n5 = JTBToolkit.makeNodeToken(n6); }
      { n2.addNode(n5); }
      n7=commonValueExpression()
      { n2.addNode(n7); }
      n9=")" { n8 = JTBToolkit.makeNodeToken(n9); }
      { n2.addNode(n8); }
      { n0 = new NodeChoice(n2, 1); }
   |
      n11=<number> { n10 = JTBToolkit.makeNodeToken(n11); }
      { n0 = new NodeChoice(n10, 2); }
   )
   
   { return new nonparenthesizedValueExpressionPrimary(n0); }
}

identifier identifier() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<identifier> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new identifier(n0); }
}

booleanValueExpression booleanValueExpression() :
{
   booleanTerm n0;
   booleanValueExpressionPrime n1;

   
}
{
   n0=booleanTerm()
   n1=booleanValueExpressionPrime()
   
   { return new booleanValueExpression(n0,n1); }
}

booleanValueExpressionPrime booleanValueExpressionPrime() :
{
   NodeOptional n0 = new NodeOptional();
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   booleanTerm n4;
   booleanValueExpressionPrime n5;

   
}
{
   (
      { n1 = new NodeSequence(3); }
      n3=<OR> { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      n4=booleanTerm()
      { n1.addNode(n4); }
      n5=booleanValueExpressionPrime()
      { n1.addNode(n5); }
      { n0.addNode(n1); }
   )?
   
   { return new booleanValueExpressionPrime(n0); }
}

booleanTerm booleanTerm() :
{
   booleanFactor n0;
   booleanTermPrime n1;

   
}
{
   n0=booleanFactor()
   n1=booleanTermPrime()
   
   { return new booleanTerm(n0,n1); }
}

booleanTermPrime booleanTermPrime() :
{
   NodeOptional n0 = new NodeOptional();
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   booleanFactor n4;
   booleanTermPrime n5;

   
}
{
   (
      { n1 = new NodeSequence(3); }
      n3=<AND> { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      n4=booleanFactor()
      { n1.addNode(n4); }
      n5=booleanTermPrime()
      { n1.addNode(n5); }
      { n0.addNode(n1); }
   )?
   
   { return new booleanTermPrime(n0); }
}

booleanFactor booleanFactor() :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   boleanPredicand n3;
   NodeOptional n4 = new NodeOptional();
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   boleanPredicand n8;

   
}
{
   (
      n2=<NOT> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   n3=boleanPredicand()
   (
      { n5 = new NodeSequence(2); }
      n7=<compop> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
      n8=boleanPredicand()
      { n5.addNode(n8); }
      { n4.addNode(n5); }
   )?
   
   { return new booleanFactor(n0,n3,n4); }
}

boleanPredicand boleanPredicand() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   booleanValueExpression n4;
   NodeToken n5;
   Token n6;
   nonparenthesizedValueExpressionPrimary n7;

   
}
{
   (
      { n1 = new NodeSequence(3); }
      n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      n4=booleanValueExpression()
      { n1.addNode(n4); }
      n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
      { n1.addNode(n5); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n7=nonparenthesizedValueExpressionPrimary()
      { n0 = new NodeChoice(n7, 1); }
   )
   
   { return new boleanPredicand(n0); }
}
