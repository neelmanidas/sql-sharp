//
// Generated by JTB 1.3.2
//



PARSER_BEGIN(SQLParser)
import syntaxtree.*;
import java.util.Vector;


class SQLParser 
{
}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}


PARSER_END(SQLParser)

SKIP :
{
   <"--" (["a"-"z"])* ("\n" | "\r" | "\r\n")>
   | " "
   | "\t"
   | "\n"
}

TOKEN :
{
   <SELECT: "SELECT">
   | <FROM: "FROM">
   | <WHERE: "WHERE">
   | <GROUPBY: "GROUP BY">
   | <ORDERBY: "ORDER BY">
   | <comma: ",">
   | <identifier: ["a"-"z"] (["a"-"z"] | ["0"-"9"])*>
   | <asterisk: "*">
   | <AS: "AS">
   | <leftparen: "(">
   | <rightparen: ")">
   | <setfunctiontype: "AVG" | "MAX" | "MIN" | "SUM" | "COUNT">
   | <#digit: ["0"-"9"]>
   | <#integer: (<digit>)+>
   | <#real: (<digit>)+ "." (<digit>)+>
   | <number: ("+" | "-")? (<integer> | <real>)>
   | <OR: "OR">
   | <AND: "AND">
   | <semicolon: ";">
   | <IS: "IS">
   | <NOT: "NOT">
   | <#equalsoperator: "=">
   | <#lessthanoperator: "<">
   | <#greaterthanoperator: ">">
   | <compop: <equalsoperator> | <lessthanoperator> <greaterthanoperator> | <lessthanoperator> | <greaterthanoperator> | <lessthanoperator> <equalsoperator> | <greaterthanoperator> <equalsoperator>>
   | <ASC: "ASC">
   | <DESC: "DESC">
}

Prog Prog() :
{
   queryList n0;
   NodeToken n1;
   Token n2;

   
}
{
   n0=queryList()
   n2=<EOF> { 
      n2.beginColumn++; n2.endColumn++;
      n1 = JTBToolkit.makeNodeToken(n2);
   }
   
   { return new Prog(n0,n1); }
}

queryList queryList() :
{
   querySpecification n0;
   NodeListOptional n1 = new NodeListOptional();
   querySpecification n2;

   
}
{
   n0=querySpecification()
   (
      n2=querySpecification()
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new queryList(n0,n1); }
}

querySpecification querySpecification() :
{
   select n0;
   selectList n1;
   from n2;
   identifier n3;
   NodeOptional n4 = new NodeOptional();
   NodeSequence n5;
   where n6;
   booleanValueExpression n7;
   NodeOptional n8 = new NodeOptional();
   NodeSequence n9;
   groupby n10;
   identifier n11;
   NodeOptional n12 = new NodeOptional();
   NodeSequence n13;
   orderby n14;
   commonValueExpression n15;
   NodeOptional n16;
   NodeChoice n17;
   asc n18;
   desc n19;
   NodeToken n20;
   Token n21;

   
}
{
   n0=select()
   n1=selectList()
   n2=from()
   n3=identifier()
   (
      { n5 = new NodeSequence(2); }
      n6=where()
      { n5.addNode(n6); }
      n7=booleanValueExpression()
      { n5.addNode(n7); }
      { n4.addNode(n5); }
   )?
   (
      { n9 = new NodeSequence(2); }
      n10=groupby()
      { n9.addNode(n10); }
      n11=identifier()
      { n9.addNode(n11); }
      { n8.addNode(n9); }
   )?
   (
      { n16 = new NodeOptional(); }
      { n13 = new NodeSequence(3); }
      n14=orderby()
      { n13.addNode(n14); }
      n15=commonValueExpression()
      { n13.addNode(n15); }
      (
         (
            n18=asc()
            { n17 = new NodeChoice(n18, 0); }
         |
            n19=desc()
            { n17 = new NodeChoice(n19, 1); }
         )
         { n16.addNode(n17); }
      )?
      { n13.addNode(n16); }
      { n12.addNode(n13); }
   )?
   n21=";" { n20 = JTBToolkit.makeNodeToken(n21); }
   
   { return new querySpecification(n0,n1,n2,n3,n4,n8,n12,n20); }
}

select select() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<SELECT> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new select(n0); }
}

selectList selectList() :
{
   NodeChoice n0;
   asterisk n1;
   NodeSequence n2;
   derivedColumn n3;
   NodeListOptional n4 = new NodeListOptional();
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   derivedColumn n8;

   
}
{
   (
      n1=asterisk()
      { n0 = new NodeChoice(n1, 0); }
   |
      { n2 = new NodeSequence(2); }
      n3=derivedColumn()
      { n2.addNode(n3); }
      (
         { n5 = new NodeSequence(2); }
         n7="," { n6 = JTBToolkit.makeNodeToken(n7); }
         { n5.addNode(n6); }
         n8=derivedColumn()
         { n5.addNode(n8); }
         { n4.addNode(n5); }
      )*
      { n4.nodes.trimToSize(); }
      { n2.addNode(n4); }
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new selectList(n0); }
}

asterisk asterisk() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<asterisk> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new asterisk(n0); }
}

derivedColumn derivedColumn() :
{
   commonValueExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeOptional n3;
   as n4;
   identifier n5;

   
}
{
   n0=commonValueExpression()
   (
      { n3 = new NodeOptional(); }
      { n2 = new NodeSequence(2); }
      (
         n4=as()
         { n3.addNode(n4); }
      )?
      { n2.addNode(n3); }
      n5=identifier()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )?
   
   { return new derivedColumn(n0,n1); }
}

commonValueExpression commonValueExpression() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   commonValueExpression n4;
   NodeToken n5;
   Token n6;
   nonparenthesizedValueExpressionPrimary n7;

   
}
{
   (
      { n1 = new NodeSequence(3); }
      n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      n4=commonValueExpression()
      { n1.addNode(n4); }
      n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
      { n1.addNode(n5); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n7=nonparenthesizedValueExpressionPrimary()
      { n0 = new NodeChoice(n7, 1); }
   )
   
   { return new commonValueExpression(n0); }
}

nonparenthesizedValueExpressionPrimary nonparenthesizedValueExpressionPrimary() :
{
   NodeChoice n0;
   identifier n1;
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   commonValueExpression n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;

   
}
{
   (
      n1=identifier()
      { n0 = new NodeChoice(n1, 0); }
   |
      { n2 = new NodeSequence(4); }
      n4=<setfunctiontype> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n6="(" { n5 = JTBToolkit.makeNodeToken(n6); }
      { n2.addNode(n5); }
      n7=commonValueExpression()
      { n2.addNode(n7); }
      n9=")" { n8 = JTBToolkit.makeNodeToken(n9); }
      { n2.addNode(n8); }
      { n0 = new NodeChoice(n2, 1); }
   |
      n11=<number> { n10 = JTBToolkit.makeNodeToken(n11); }
      { n0 = new NodeChoice(n10, 2); }
   )
   
   { return new nonparenthesizedValueExpressionPrimary(n0); }
}

as as() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<AS> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new as(n0); }
}

from from() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<FROM> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new from(n0); }
}

identifier identifier() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<identifier> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new identifier(n0); }
}

where where() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<WHERE> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new where(n0); }
}

booleanValueExpression booleanValueExpression() :
{
   booleanTerm n0;
   booleanValueExpressionPrime n1;

   
}
{
   n0=booleanTerm()
   n1=booleanValueExpressionPrime()
   
   { return new booleanValueExpression(n0,n1); }
}

booleanValueExpressionPrime booleanValueExpressionPrime() :
{
   NodeOptional n0 = new NodeOptional();
   NodeSequence n1;
   or n2;
   booleanTerm n3;
   booleanValueExpressionPrime n4;

   
}
{
   (
      { n1 = new NodeSequence(3); }
      n2=or()
      { n1.addNode(n2); }
      n3=booleanTerm()
      { n1.addNode(n3); }
      n4=booleanValueExpressionPrime()
      { n1.addNode(n4); }
      { n0.addNode(n1); }
   )?
   
   { return new booleanValueExpressionPrime(n0); }
}

or or() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<OR> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new or(n0); }
}

booleanTerm booleanTerm() :
{
   booleanFactor n0;
   booleanTermPrime n1;

   
}
{
   n0=booleanFactor()
   n1=booleanTermPrime()
   
   { return new booleanTerm(n0,n1); }
}

booleanTermPrime booleanTermPrime() :
{
   NodeOptional n0 = new NodeOptional();
   NodeSequence n1;
   and n2;
   booleanFactor n3;
   booleanTermPrime n4;

   
}
{
   (
      { n1 = new NodeSequence(3); }
      n2=and()
      { n1.addNode(n2); }
      n3=booleanFactor()
      { n1.addNode(n3); }
      n4=booleanTermPrime()
      { n1.addNode(n4); }
      { n0.addNode(n1); }
   )?
   
   { return new booleanTermPrime(n0); }
}

and and() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<AND> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new and(n0); }
}

booleanFactor booleanFactor() :
{
   NodeOptional n0 = new NodeOptional();
   not n1;
   boleanPredicand n2;
   NodeOptional n3 = new NodeOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   boleanPredicand n7;

   
}
{
   (
      n1=not()
      { n0.addNode(n1); }
   )?
   n2=boleanPredicand()
   (
      { n4 = new NodeSequence(2); }
      n6=<compop> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      n7=boleanPredicand()
      { n4.addNode(n7); }
      { n3.addNode(n4); }
   )?
   
   { return new booleanFactor(n0,n2,n3); }
}

not not() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<NOT> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new not(n0); }
}

boleanPredicand boleanPredicand() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   booleanValueExpression n4;
   NodeToken n5;
   Token n6;
   nonparenthesizedValueExpressionPrimary n7;

   
}
{
   (
      { n1 = new NodeSequence(3); }
      n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      n4=booleanValueExpression()
      { n1.addNode(n4); }
      n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
      { n1.addNode(n5); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n7=nonparenthesizedValueExpressionPrimary()
      { n0 = new NodeChoice(n7, 1); }
   )
   
   { return new boleanPredicand(n0); }
}

groupby groupby() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<GROUPBY> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new groupby(n0); }
}

orderby orderby() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<ORDERBY> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new orderby(n0); }
}

asc asc() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<ASC> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new asc(n0); }
}

desc desc() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<DESC> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new desc(n0); }
}
