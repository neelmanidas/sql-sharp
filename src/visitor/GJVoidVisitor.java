//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * All GJ void visitors must implement this interface.
 */

public interface GJVoidVisitor<A> {

   //
   // GJ void Auto class visitors
   //

   public void visit(NodeList n, A argu);
   public void visit(NodeListOptional n, A argu);
   public void visit(NodeOptional n, A argu);
   public void visit(NodeSequence n, A argu);
   public void visit(NodeToken n, A argu);

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> queryList()
    * f1 -> <EOF>
    */
   public void visit(Prog n, A argu);

   /**
    * f0 -> querySpecification()
    * f1 -> ( querySpecification() )*
    */
   public void visit(queryList n, A argu);

   /**
    * f0 -> select()
    * f1 -> selectList()
    * f2 -> from()
    * f3 -> identifier()
    * f4 -> [ where() booleanValueExpression() ]
    * f5 -> [ groupby() identifier() ]
    * f6 -> [ orderby() commonValueExpression() [ asc() | desc() ] ]
    * f7 -> ";"
    */
   public void visit(querySpecification n, A argu);

   /**
    * f0 -> <SELECT>
    */
   public void visit(select n, A argu);

   /**
    * f0 -> asterisk()
    *       | derivedColumn() ( "," derivedColumn() )*
    */
   public void visit(selectList n, A argu);

   /**
    * f0 -> <asterisk>
    */
   public void visit(asterisk n, A argu);

   /**
    * f0 -> commonValueExpression()
    * f1 -> [ [ as() ] identifier() ]
    */
   public void visit(derivedColumn n, A argu);

   /**
    * f0 -> "(" commonValueExpression() ")"
    *       | nonparenthesizedValueExpressionPrimary()
    */
   public void visit(commonValueExpression n, A argu);

   /**
    * f0 -> identifier()
    *       | <setfunctiontype> "(" commonValueExpression() ")"
    *       | <number>
    */
   public void visit(nonparenthesizedValueExpressionPrimary n, A argu);

   /**
    * f0 -> <AS>
    */
   public void visit(as n, A argu);

   /**
    * f0 -> <FROM>
    */
   public void visit(from n, A argu);

   /**
    * f0 -> <identifier>
    */
   public void visit(identifier n, A argu);

   /**
    * f0 -> <WHERE>
    */
   public void visit(where n, A argu);

   /**
    * f0 -> booleanTerm()
    * f1 -> booleanValueExpressionPrime()
    */
   public void visit(booleanValueExpression n, A argu);

   /**
    * f0 -> ( or() booleanTerm() booleanValueExpressionPrime() )?
    */
   public void visit(booleanValueExpressionPrime n, A argu);

   /**
    * f0 -> <OR>
    */
   public void visit(or n, A argu);

   /**
    * f0 -> booleanFactor()
    * f1 -> booleanTermPrime()
    */
   public void visit(booleanTerm n, A argu);

   /**
    * f0 -> ( and() booleanFactor() booleanTermPrime() )?
    */
   public void visit(booleanTermPrime n, A argu);

   /**
    * f0 -> <AND>
    */
   public void visit(and n, A argu);

   /**
    * f0 -> [ not() ]
    * f1 -> boleanPredicand()
    * f2 -> [ <compop> boleanPredicand() ]
    */
   public void visit(booleanFactor n, A argu);

   /**
    * f0 -> <NOT>
    */
   public void visit(not n, A argu);

   /**
    * f0 -> "(" booleanValueExpression() ")"
    *       | nonparenthesizedValueExpressionPrimary()
    */
   public void visit(boleanPredicand n, A argu);

   /**
    * f0 -> <GROUPBY>
    */
   public void visit(groupby n, A argu);

   /**
    * f0 -> <ORDERBY>
    */
   public void visit(orderby n, A argu);

   /**
    * f0 -> <ASC>
    */
   public void visit(asc n, A argu);

   /**
    * f0 -> <DESC>
    */
   public void visit(desc n, A argu);

}

