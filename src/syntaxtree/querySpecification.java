//
// Generated by JTB 1.3.2
//

package syntaxtree;

/**
 * Grammar production:
 * f0 -> "SELECT"
 * f1 -> selectList()
 * f2 -> "FROM"
 * f3 -> <identifier>
 * f4 -> [ "WHERE" booleanValueExpression() ]
 * f5 -> [ "GROUP BY" <identifier> ]
 * f6 -> [ "ORDER BY" commonValueExpression() [ "ASC" | "DESC" ] ]
 * f7 -> ";"
 */
public class querySpecification implements Node {
   public NodeToken f0;
   public selectList f1;
   public NodeToken f2;
   public NodeToken f3;
   public NodeOptional f4;
   public NodeOptional f5;
   public NodeOptional f6;
   public NodeToken f7;

   public querySpecification(NodeToken n0, selectList n1, NodeToken n2, NodeToken n3, NodeOptional n4, NodeOptional n5, NodeOptional n6, NodeToken n7) {
      f0 = n0;
      f1 = n1;
      f2 = n2;
      f3 = n3;
      f4 = n4;
      f5 = n5;
      f6 = n6;
      f7 = n7;
   }

   public querySpecification(selectList n0, NodeToken n1, NodeOptional n2, NodeOptional n3, NodeOptional n4) {
      f0 = new NodeToken("SELECT");
      f1 = n0;
      f2 = new NodeToken("FROM");
      f3 = n1;
      f4 = n2;
      f5 = n3;
      f6 = n4;
      f7 = new NodeToken(";");
   }

   public void accept(visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
}

