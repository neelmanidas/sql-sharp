/* Generated By:JavaCC: Do not edit this line. SQLParser.java */
import syntaxtree.*;
import java.util.Vector;


class SQLParser implements SQLParserConstants {

  final public Prog Prog() throws ParseException {
   queryList n0;
   NodeToken n1;
   Token n2;
    n0 = queryList();
    n2 = jj_consume_token(0);
      n2.beginColumn++; n2.endColumn++;
      n1 = JTBToolkit.makeNodeToken(n2);
     {if (true) return new Prog(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public queryList queryList() throws ParseException {
   querySpecification n0;
   NodeListOptional n1 = new NodeListOptional();
   querySpecification n2;
    n0 = querySpecification();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SELECT:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      n2 = querySpecification();
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new queryList(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public querySpecification querySpecification() throws ParseException {
   NodeToken n0;
   Token n1;
   selectList n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeOptional n7 = new NodeOptional();
   NodeSequence n8;
   NodeToken n9;
   Token n10;
   booleanValueExpression n11;
   NodeOptional n12 = new NodeOptional();
   NodeSequence n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
   NodeOptional n18 = new NodeOptional();
   NodeSequence n19;
   NodeToken n20;
   Token n21;
   commonValueExpression n22;
   NodeOptional n23;
   NodeChoice n24;
   NodeToken n25;
   Token n26;
   NodeToken n27;
   Token n28;
   NodeToken n29;
   Token n30;
    n1 = jj_consume_token(SELECT);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n2 = selectList();
    n4 = jj_consume_token(FROM);
               n3 = JTBToolkit.makeNodeToken(n4);
    n6 = jj_consume_token(identifier);
                     n5 = JTBToolkit.makeNodeToken(n6);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHERE:
        n8 = new NodeSequence(2);
      n10 = jj_consume_token(WHERE);
                    n9 = JTBToolkit.makeNodeToken(n10);
        n8.addNode(n9);
      n11 = booleanValueExpression();
        n8.addNode(n11);
        n7.addNode(n8);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GROUPBY:
        n13 = new NodeSequence(2);
      n15 = jj_consume_token(GROUPBY);
                       n14 = JTBToolkit.makeNodeToken(n15);
        n13.addNode(n14);
      n17 = jj_consume_token(identifier);
                         n16 = JTBToolkit.makeNodeToken(n17);
        n13.addNode(n16);
        n12.addNode(n13);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ORDERBY:
        n23 = new NodeOptional();
        n19 = new NodeSequence(3);
      n21 = jj_consume_token(ORDERBY);
                       n20 = JTBToolkit.makeNodeToken(n21);
        n19.addNode(n20);
      n22 = commonValueExpression();
        n19.addNode(n22);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASC:
      case DESC:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASC:
          n26 = jj_consume_token(ASC);
                        n25 = JTBToolkit.makeNodeToken(n26);
              n24 = new NodeChoice(n25, 0);
          break;
        case DESC:
          n28 = jj_consume_token(DESC);
                         n27 = JTBToolkit.makeNodeToken(n28);
              n24 = new NodeChoice(n27, 1);
          break;
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
           n23.addNode(n24);
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
        n19.addNode(n23);
        n18.addNode(n19);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    n30 = jj_consume_token(semicolon);
             n29 = JTBToolkit.makeNodeToken(n30);
     {if (true) return new querySpecification(n0,n2,n3,n5,n7,n12,n18,n29);}
    throw new Error("Missing return statement in function");
  }

  final public selectList selectList() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeSequence n3;
   derivedColumn n4;
   NodeListOptional n5 = new NodeListOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   derivedColumn n9;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case asterisk:
      n2 = jj_consume_token(asterisk);
               n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case identifier:
    case leftparen:
    case setfunctiontype:
    case number:
        n3 = new NodeSequence(2);
      n4 = derivedColumn();
        n3.addNode(n4);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case comma:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_2;
        }
           n6 = new NodeSequence(2);
        n8 = jj_consume_token(comma);
                  n7 = JTBToolkit.makeNodeToken(n8);
           n6.addNode(n7);
        n9 = derivedColumn();
           n6.addNode(n9);
           n5.addNode(n6);
      }
        n5.nodes.trimToSize();
        n3.addNode(n5);
        n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new selectList(n0);}
    throw new Error("Missing return statement in function");
  }

  final public derivedColumn derivedColumn() throws ParseException {
   commonValueExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeOptional n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
    n0 = commonValueExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case identifier:
    case AS:
        n3 = new NodeOptional();
        n2 = new NodeSequence(2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AS:
        n5 = jj_consume_token(AS);
                   n4 = JTBToolkit.makeNodeToken(n5);
           n3.addNode(n4);
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
        n2.addNode(n3);
      n7 = jj_consume_token(identifier);
                        n6 = JTBToolkit.makeNodeToken(n7);
        n2.addNode(n6);
        n1.addNode(n2);
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
     {if (true) return new derivedColumn(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public commonValueExpression commonValueExpression() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   commonValueExpression n4;
   NodeToken n5;
   Token n6;
   nonparenthesizedValueExpressionPrimary n7;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case leftparen:
        n1 = new NodeSequence(3);
      n3 = jj_consume_token(leftparen);
               n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      n4 = commonValueExpression();
        n1.addNode(n4);
      n6 = jj_consume_token(rightparen);
               n5 = JTBToolkit.makeNodeToken(n6);
        n1.addNode(n5);
        n0 = new NodeChoice(n1, 0);
      break;
    case identifier:
    case setfunctiontype:
    case number:
      n7 = nonparenthesizedValueExpressionPrimary();
        n0 = new NodeChoice(n7, 1);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new commonValueExpression(n0);}
    throw new Error("Missing return statement in function");
  }

  final public nonparenthesizedValueExpressionPrimary nonparenthesizedValueExpressionPrimary() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   commonValueExpression n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case identifier:
      n2 = jj_consume_token(identifier);
                        n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case setfunctiontype:
        n3 = new NodeSequence(4);
      n5 = jj_consume_token(setfunctiontype);
                             n4 = JTBToolkit.makeNodeToken(n5);
        n3.addNode(n4);
      n7 = jj_consume_token(leftparen);
               n6 = JTBToolkit.makeNodeToken(n7);
        n3.addNode(n6);
      n8 = commonValueExpression();
        n3.addNode(n8);
      n10 = jj_consume_token(rightparen);
                n9 = JTBToolkit.makeNodeToken(n10);
        n3.addNode(n9);
        n0 = new NodeChoice(n3, 1);
      break;
    case number:
      n12 = jj_consume_token(number);
                     n11 = JTBToolkit.makeNodeToken(n12);
        n0 = new NodeChoice(n11, 2);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new nonparenthesizedValueExpressionPrimary(n0);}
    throw new Error("Missing return statement in function");
  }

  final public booleanValueExpression booleanValueExpression() throws ParseException {
   booleanTerm n0;
   booleanValueExpressionPrime n1;
    n0 = booleanTerm();
    n1 = booleanValueExpressionPrime();
     {if (true) return new booleanValueExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public booleanValueExpressionPrime booleanValueExpressionPrime() throws ParseException {
   NodeOptional n0 = new NodeOptional();
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   booleanTerm n4;
   booleanValueExpressionPrime n5;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OR:
        n1 = new NodeSequence(3);
      n3 = jj_consume_token(OR);
                n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      n4 = booleanTerm();
        n1.addNode(n4);
      n5 = booleanValueExpressionPrime();
        n1.addNode(n5);
        n0.addNode(n1);
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
     {if (true) return new booleanValueExpressionPrime(n0);}
    throw new Error("Missing return statement in function");
  }

  final public booleanTerm booleanTerm() throws ParseException {
   booleanFactor n0;
   booleanTermPrime n1;
    n0 = booleanFactor();
    n1 = booleanTermPrime();
     {if (true) return new booleanTerm(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public booleanTermPrime booleanTermPrime() throws ParseException {
   NodeOptional n0 = new NodeOptional();
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   booleanFactor n4;
   booleanTermPrime n5;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
        n1 = new NodeSequence(3);
      n3 = jj_consume_token(AND);
                 n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      n4 = booleanFactor();
        n1.addNode(n4);
      n5 = booleanTermPrime();
        n1.addNode(n5);
        n0.addNode(n1);
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
     {if (true) return new booleanTermPrime(n0);}
    throw new Error("Missing return statement in function");
  }

  final public booleanFactor booleanFactor() throws ParseException {
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   boleanPredicand n3;
   NodeOptional n4 = new NodeOptional();
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   boleanPredicand n8;
   NodeOptional n9 = new NodeOptional();
   NodeSequence n10;
   NodeToken n11;
   Token n12;
   NodeOptional n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      n2 = jj_consume_token(NOT);
                 n1 = JTBToolkit.makeNodeToken(n2);
        n0.addNode(n1);
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
    n3 = boleanPredicand();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case compop:
        n5 = new NodeSequence(2);
      n7 = jj_consume_token(compop);
                    n6 = JTBToolkit.makeNodeToken(n7);
        n5.addNode(n6);
      n8 = boleanPredicand();
        n5.addNode(n8);
        n4.addNode(n5);
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IS:
        n13 = new NodeOptional();
        n10 = new NodeSequence(3);
      n12 = jj_consume_token(IS);
                 n11 = JTBToolkit.makeNodeToken(n12);
        n10.addNode(n11);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
        n15 = jj_consume_token(NOT);
                     n14 = JTBToolkit.makeNodeToken(n15);
           n13.addNode(n14);
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
        n10.addNode(n13);
      n17 = jj_consume_token(truthValue);
                         n16 = JTBToolkit.makeNodeToken(n17);
        n10.addNode(n16);
        n9.addNode(n10);
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
     {if (true) return new booleanFactor(n0,n3,n4,n9);}
    throw new Error("Missing return statement in function");
  }

  final public boleanPredicand boleanPredicand() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   booleanValueExpression n4;
   NodeToken n5;
   Token n6;
   nonparenthesizedValueExpressionPrimary n7;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case leftparen:
        n1 = new NodeSequence(3);
      n3 = jj_consume_token(leftparen);
               n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      n4 = booleanValueExpression();
        n1.addNode(n4);
      n6 = jj_consume_token(rightparen);
               n5 = JTBToolkit.makeNodeToken(n6);
        n1.addNode(n5);
        n0 = new NodeChoice(n1, 0);
      break;
    case identifier:
    case setfunctiontype:
    case number:
      n7 = nonparenthesizedValueExpressionPrimary();
        n0 = new NodeChoice(n7, 1);
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new boleanPredicand(n0);}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public SQLParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[19];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x20,0x80,0x100,0x80000000,0x80000000,0x200,0x400,0x115800,0x2000,0x2800,0x114800,0x110800,0x200000,0x400000,0x4000000,0x40000000,0x4000000,0x2000000,0x114800,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public SQLParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SQLParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SQLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public SQLParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SQLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public SQLParser(SQLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SQLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[33];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 19; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 33; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}
